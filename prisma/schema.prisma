// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PosterSource {
  RAW
  GITHUB
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id        String   @id @default(uuid())
  name      String
  text      String
  fromId    String?
  toId      String?
  roomID    String?
  room      Rooms?   @relation(fields: [roomID], references: [id], onDelete: Cascade)
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Rooms {
  id             String      @id @default(uuid())
  roomname       String?
  roompasscode   String?
  createdById    String?
  createdByName  String?
  createdByImage String?
  isPrivate      Boolean?
  opponentId     String?
  opponentName   String?
  opponentReady  Boolean?
  turn           String?
  winner         String?
  gameStarted    Boolean?
  createdAt      DateTime    @unique @default(now())
  Message        Message[]
  GameMoves      GameMoves[]
}

model GameMoves {
  id     String   @id @default(uuid())
  roomId String?
  fromId String?
  toId   String?
  xCoord Int?
  yCoord Int?
  turn   String?
  isHit  Boolean?
  room   Rooms?   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
